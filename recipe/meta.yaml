{% set name = "openmp" %}
{% set version = "9.0.1" %}
{% set sha256 = "5c94060f846f965698574d9ce22975c0e9f04c9b14088c3af5f03870af75cace" %}
{% set openmp_ver = "4.5" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/openmp-{{ version }}.src.tar.xz
  sha256: {{ sha256 }}

build:
  number: 1
  skip: true  # [win and vc<14]

outputs:
  - name: llvm-openmp
    script: build-llvm-openmp.sh  # [not win]
    script: bld-llvm-openmp.bat   # [win]
    build:
      run_exports:
        strong:
          - {{ pin_subpackage("llvm-openmp", max_pin=None) }}
    requirements:
      build:
        - {{ compiler('cxx') }}  # [unix]
        - vs2017_{{ target_platform }}  # [win]
        - cmake
        - perl
        - ninja  # [win]
      host:
        - llvmdev {{ version }}|{{ version }}.*
      run_constrained:
        - clangdev {{ version }}|{{ version }}.*
        - llvmdev {{ version }}|{{ version }}.*
        - openmp {{ version }}|{{ version }}.*
    about:
      home: http://openmp.llvm.org/
      license: NCSA
      license_file: LICENSE.txt
      summary: The OpenMP API supports multi-platform shared-memory parallel programming in C/C++ and Fortran.
    test:
      requires:
        - clangdev
        - {{ compiler('cxx') }}  # [unix]
        - vs2017_{{ target_platform }}  # [win]
      commands:
        - if not exist %LIBRARY_BIN%\\libomp.dll exit 1   # [win]
        - test -f $PREFIX/lib/libomp.so                   # [linux]
        - test -f $PREFIX/lib/libomp.dylib                # [osx]
        - if not exist %LIBRARY_LIB%\\libomp.lib exit 1   # [win]
        - if not exist %LIBRARY_INC%\\omp.h exit 1        # [win]
        - test -f $PREFIX/include/omp.h                   # [unix]
        - $PREFIX/bin/clang -v -fopenmp -I$PREFIX/include -L$PREFIX/lib -Wl,-rpath,$PREFIX/lib omp_hello.c -o omp_hello  # [not win]
        - "%LIBRARY_BIN%\\clang -v -fopenmp -I%LIBRARY_INC% -L%LIBRARY_LIB% omp_hello.c -o omp_hello.exe"  # [win]
        - ./omp_hello            # [unix]
        - "%cd%\\omp_hello.exe"  # [win]
      files:
        - omp_hello.c

  - name: openmp_impl
    script: build-openmp_impl.sh
    version: {{ openmp_ver }}
    requirements:
      host:
        - {{ pin_subpackage("llvm-openmp", exact=True) }}
      run:
        - {{ pin_subpackage("llvm-openmp", max_pin=None) }}
        - _libgcc_mutex {{ _libgcc_mutex }}
    build:
      string: 0_llvm
      skip: True  # [not linux]
      always_include_files:
        # this major version has to match the libgomp version from gcc
        - lib/libgomp.so.1
      track_features:
        - llvm_openmp
      run_exports:
        strong:
          - {{ pin_subpackage("openmp_impl", max_pin=None) }}
    about:
      summary: OpenMP Implementation Mutex
      license: BSD-3-Clause
      license_file: LICENSE
      home: https://github.com/conda-forge/openmp-feedstock
    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      commands:
        - test -f $PREFIX/lib/libgomp.so.1
        - if [ ! "$PREFIX/lib/libgomp.so.1" -ef "$PREFIX/lib/libomp.so" ]; then exit 1; fi
        - rm -f omp_hello && ${CC} -v -fopenmp omp_hello.c -o omp_hello && ./omp_hello
        - rm -f omp_hello && ${CXX} -v -fopenmp omp_hello.c -o omp_hello && ./omp_hello
      files:
        - omp_hello.c

# here to please the linter - not used
about:
  home: http://openmp.llvm.org/
  license: NCSA
  license_file: LICENSE.txt
  summary: The OpenMP API supports multi-platform shared-memory parallel programming in C/C++ and Fortran.

extra:
  recipe-maintainers:
    - inducer
    - jakirkham
    - yesimon
    - isuruf
    - beckermr
